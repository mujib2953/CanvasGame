{"version":3,"sources":["ts/common/constanats.ts","ts/common/index.ts","ts/common/Sound.ts","ts/common/Music.ts","ts/Game.ts","ts/app.ts"],"names":[],"mappings":"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","file":"app.a0488aa9.map","sourceRoot":"..","sourcesContent":["const GAME_CONFIG ={\r\n\r\n    // --- Game related constants\r\n    FPS: 60, // --- Frames per seconds\r\n    GAME_LIVES: 3,\r\n    SHOW_BOUNDING: true,\r\n\r\n    // --- ship related\r\n    SHIP_SIZE: 30,\r\n    SHIP_INV_DUR: 3, // duration of the ship's invisibility in seconds\r\n    SHIP_BLINK_DUR: 0.1, // duration in seconds of a single blink during ship's invisibility,\r\n\r\n    // ---- Local storage\r\n    SAVE_KEY_SCORE: \"GAME|HighScore\",\r\n\r\n    // --- asteroids related\r\n    ROID_NUM: 3,\r\n    ROID_SIZE: 100, // starting size of asteroids in pixels\r\n    ROID_SPD: 50, // max starting speed of asteroids in pixels per second\r\n    ROID_VERT: 10, // average number of vertices on each asteroid\r\n    ROID_JAG: 0.4, // jaggedness of the asteroids (0 = none, 1 = lots)\r\n\r\n    // --- colors\r\n    COLOR_BLACK: '#000',\r\n    COLOR_WHITE: '#FFF',\r\n    COLOR_SLATE_GRAY: '#708090',\r\n    COLOR_LIME: '#BFFF00',\r\n\r\n    // --- sound related\r\n    SOUND_ON: true,\r\n    SOUND_PATHS: [\r\n        {\r\n            \"key\": \"FX_EXPLODE_PATH\",\r\n            \"path\": \"./sounds/explode.m4a\",\r\n        }, {\r\n            \"key\": \"FX_HIT_PATH\",\r\n            \"path\": \"./sounds/hit.m4a\",\r\n        }, {\r\n            \"key\": \"FX_LASER_PATH\",\r\n            \"path\": \"./sounds/laser.m4a\",\r\n        }, {\r\n            \"key\": \"FX_THRUST_PATH\",\r\n            \"path\": \"./sounds/thrust.m4a\",\r\n        }\r\n    ],\r\n    MUSIC_LOW_PATH: \"sounds/music-low.m4a\",\r\n    MUSIC_HIGH_PATH: \"sounds/music-high.m4a\"\r\n\r\n};\r\n\r\nexport default GAME_CONFIG;","\r\nconst utilFunc = {\r\n\r\n    soundPromise: (audio: HTMLAudioElement): void => {\r\n        console.info(\"Sound :: \" + audio.src + \" is playing.\");\r\n\r\n        let playPromise = audio.play();\r\n\r\n        if (playPromise !== undefined) {\r\n            playPromise\r\n                .then(() => {\r\n                })\r\n                .catch((e: ExceptionInformation) => {\r\n                    console.error(e);\r\n                    console.warn(\"unable to play Audio \" + audio.src);\r\n                })\r\n        }\r\n    },\r\n    getRandom: (): number => {\r\n        return Math.random();\r\n    },\r\n    distanceBetweenPoints: (startX: number, startY: number, endX: number, endY: number): number => {\r\n        return Math.sqrt( Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2) );\r\n    }\r\n}\r\n\r\nexport default utilFunc;","import GAME_CONFIG from './constanats';\r\nimport utilFunc from '../common';\r\n\r\nclass Sound {\r\n\r\n    private path: string;\r\n    private maxStream: number;\r\n    private volume: number;\r\n\r\n    private streamNum: number = 0;\r\n    private streams: Array<HTMLAudioElement> = [];\r\n\r\n    constructor(path: string, maxStream: number = 1, volume: number = 1.0) {\r\n        this.path = path;\r\n        this.maxStream = maxStream;\r\n        this.volume = volume;\r\n\r\n        this.addSound(path, maxStream, volume);\r\n    }\r\n\r\n    public play(): void {\r\n        if(GAME_CONFIG.SOUND_ON) {\r\n            this.streamNum = (this.streamNum + 1) % this.maxStream;\r\n            utilFunc.soundPromise(this.streams[this.streamNum]);\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        this.streams[this.streamNum].pause();\r\n        this.streams[this.streamNum].currentTime = 0;\r\n    }\r\n\r\n\r\n    private addSound(path: string, maxStream: number, volume: number ): void {\r\n        for(let i = 0; i < maxStream; i++) {\r\n            let soundAudio: HTMLAudioElement = new Audio(path);\r\n            this.streams.push(soundAudio);\r\n            this.streams[i].volume = volume;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sound;","import GAME_CONFIG from './constanats';\r\nimport utilFunc from '../common';\r\n\r\nclass Music {\r\n\r\n    readonly soundLow: HTMLAudioElement;\r\n    readonly soundHigh: HTMLAudioElement;\r\n    private isLow: boolean = true;\r\n    private tempo: number = 1.0; // --- seconds per beats\r\n    private beatTime: number = 0; // --- frames left until next beats\r\n\r\n    constructor(srcLow: string, srcHigh: string) {\r\n        this.soundLow = new Audio(srcLow);\r\n        this.soundHigh = new Audio(srcHigh);\r\n\r\n        this.soundLow.autoplay = true;\r\n        this.soundHigh.autoplay = true;\r\n    }\r\n\r\n    public play(): void {\r\n        if(GAME_CONFIG.SOUND_ON) {\r\n            if(this.isLow) {\r\n                utilFunc.soundPromise(this.soundLow);\r\n            } else {\r\n                utilFunc.soundPromise(this.soundHigh);\r\n            }\r\n            this.isLow = !this.isLow;\r\n        }\r\n    }\r\n\r\n    public setAsteriodRatio(ratio: number): void {\r\n        this.tempo = 1.0 - 0.75 * (1.0 - ratio);\r\n    }\r\n\r\n    public tick(): void {\r\n        if(this.beatTime==0) {\r\n            this.play();\r\n            this.beatTime = Math.ceil(this.tempo * GAME_CONFIG.FPS);\r\n        } else {\r\n            this.beatTime--;\r\n        }\r\n    }\r\n}\r\nexport default Music;","import GAME_CONFIG from './common/constanats';\r\nimport Sound from './common/Sound';\r\nimport Music from './common/Music';\r\n\r\n// -- interfaces\r\nimport iSounds from './interfaces/iSounds';\r\nimport iShip from './interfaces/iShip';\r\nimport iAsteroid from './interfaces/iAsteroid';\r\n\r\nimport utilFunc from './common';\r\n\r\nexport default class  Game {\r\n\r\n    private can: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private sounds: Array<iSounds> = [];\r\n    private music: Music;\r\n\r\n    private scoreHigh: number;\r\n    private displayLevel: number;\r\n    private displayLives: number;\r\n    private displayScore: number;\r\n    private displayText: string;\r\n    private displayTextAlpha: number;\r\n\r\n    private ship: iShip;\r\n\r\n    private asteroids: Array<iAsteroid>;\r\n    private asteroidTotal: number;\r\n    private asteroidLeft: number;\r\n\r\n    private gameInterval: any;\r\n\r\n    constructor() {\r\n        this.can = <HTMLCanvasElement>document.getElementById(\"gameCanvas\");\r\n        this.ctx = <CanvasRenderingContext2D>this.can.getContext(\"2d\");\r\n\r\n        this.loadSounds();\r\n        this.loadMusics();\r\n\r\n        this.newGame();\r\n\r\n        this.addEvents();\r\n\r\n        this.gameInterval = setInterval(this.update.bind(this), 1000 / GAME_CONFIG.FPS);\r\n\r\n    }\r\n\r\n    public setUpGame() {\r\n\r\n    }\r\n\r\n    public render() {\r\n        console.log(\"inside render\");\r\n    }\r\n\r\n    private loadSounds(): void {\r\n\r\n        for (let i = 0; i < GAME_CONFIG.SOUND_PATHS.length; i++) {\r\n            let temp = GAME_CONFIG.SOUND_PATHS[i];\r\n\r\n            let is: iSounds = {\r\n                name: temp.key,\r\n                sound: new Sound(temp.path)\r\n            }\r\n\r\n            this.sounds[i] = is;\r\n        }\r\n        console.log(this.sounds);\r\n    }\r\n\r\n    private loadMusics(): void {\r\n        this.music = new Music(GAME_CONFIG.MUSIC_LOW_PATH, GAME_CONFIG.MUSIC_HIGH_PATH);\r\n    }\r\n\r\n    private newGame(): void {\r\n\r\n        let scoreStr: string;\r\n\r\n        this.displayLevel = 0;\r\n        this.displayLives = GAME_CONFIG.GAME_LIVES;\r\n        this.displayScore = 0;\r\n        this.ship = this.getShip();\r\n\r\n        scoreStr = localStorage.getItem(GAME_CONFIG.SAVE_KEY_SCORE);\r\n        if (scoreStr === null) {\r\n            this.scoreHigh = 0;\r\n        } else {\r\n            this.scoreHigh = parseInt(scoreStr);\r\n        }\r\n\r\n        this.newLevel();\r\n    }\r\n\r\n    private getShip(): iShip {\r\n\r\n        let ship: iShip = {\r\n            x: this.getCanvasWidth() / 2,\r\n            y: this.getCanvasHeight() / 2,\r\n            a: 90 / 180 * Math.PI,\r\n            r: GAME_CONFIG.SHIP_SIZE / 2,\r\n            blinkNum: Math.ceil(GAME_CONFIG.SHIP_INV_DUR / GAME_CONFIG.SHIP_BLINK_DUR),\r\n            blinkTime: Math.ceil(GAME_CONFIG.SHIP_BLINK_DUR * GAME_CONFIG.FPS),\r\n            canShoot: true,\r\n            isDead: false,\r\n            explodeTime: 0,\r\n            laser: [],\r\n            rot: 0,\r\n            isThrusting: false,\r\n            thrust: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        }\r\n\r\n        return ship;\r\n    }\r\n\r\n    private getCanvasWidth(): number {\r\n        return this.can.width;\r\n    }\r\n\r\n    private getCanvasHeight(): number {\r\n        return this.can.height;\r\n    }\r\n\r\n    private newLevel(): void {\r\n\r\n        this.music.setAsteriodRatio(1);\r\n        this.displayText = \"Level: \" + (this.displayLevel + 1);\r\n        this.displayTextAlpha = 1.0;\r\n\r\n        this.createAsteroidBelt();\r\n\r\n    }\r\n\r\n    private createAsteroidBelt(): void {\r\n\r\n        this.asteroids = [];\r\n        this.asteroidTotal = (GAME_CONFIG.ROID_NUM + this.displayLevel) * 7;\r\n        this.asteroidLeft = this.asteroidTotal;\r\n\r\n        let x: number,\r\n            y: number;\r\n\r\n        for (let i: number = 0; i < GAME_CONFIG.ROID_NUM; i++) {\r\n\r\n            // --- random asteroid position not touching spaceship\r\n            do {\r\n\r\n                x = Math.floor(utilFunc.getRandom() * this.getCanvasWidth());\r\n                y = Math.floor(utilFunc.getRandom() * this.getCanvasHeight());\r\n\r\n            } while (utilFunc.distanceBetweenPoints(this.ship.x, this.ship.y, x, y) < (GAME_CONFIG.ROID_SIZE * 2 + this.ship.r));\r\n\r\n            this.asteroids.push(this.newAsteroid(x, y, Math.ceil(GAME_CONFIG.ROID_SIZE) / 2));\r\n            console.log(\"Aestroid:: \" , this.asteroids);\r\n        }\r\n\r\n    }\r\n\r\n    private newAsteroid(x: number, y: number, r: number): iAsteroid {\r\n\r\n        let lvlMult: number = 1 + 1.0 * this.displayLevel;\r\n\r\n        let asteroid: iAsteroid = {\r\n            x: x,\r\n            y: y,\r\n            xv: utilFunc.getRandom() * GAME_CONFIG.ROID_SPD * lvlMult / GAME_CONFIG.FPS * (utilFunc.getRandom() < 0.5 ? 1 : -1),\r\n            yv: utilFunc.getRandom() * GAME_CONFIG.ROID_SPD * lvlMult / GAME_CONFIG.FPS * (utilFunc.getRandom() < 0.5 ? 1 : -1),\r\n            a: utilFunc.getRandom() * Math.PI * 2, // --- into radians\r\n            r: r,\r\n            offset: [],\r\n            vert: Math.floor(utilFunc.getRandom() * (GAME_CONFIG.ROID_VERT + 1) + GAME_CONFIG.ROID_VERT / 2)\r\n        };\r\n\r\n        // --- populating the offset Array\r\n        for (let i = 0; i < asteroid.vert; i++) {\r\n            asteroid.offset.push(utilFunc.getRandom() * GAME_CONFIG.ROID_JAG * 2 + 1 - GAME_CONFIG.ROID_JAG);\r\n        }\r\n\r\n        return asteroid;\r\n    }\r\n\r\n    private addEvents(): void {\r\n\r\n        this.onKeyDown.bind(this);\r\n\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => this.onKeyDown(event.code.toLowerCase()));\r\n        document.addEventListener(\"keyup\", (event: KeyboardEvent) => this.onKeyUp(event.code.toLowerCase()));\r\n\r\n        document.addEventListener(\"click\", () => {});\r\n\r\n\r\n    }\r\n\r\n    private onKeyDown(code: string): void {\r\n        if (this.ship.isDead)\r\n            return;\r\n\r\n        switch (code) {\r\n            case 'space':\r\n                // --- space bar -->>> Shoot Laser\r\n                this.shootLaser();\r\n                break;\r\n            case 'arrowleft':\r\n                // --- Left Arrow -->>> Rotate Ship Left\r\n                this.rotateShip(false);\r\n                break;\r\n            case 'arrowup':\r\n                // --- Up Arrow -->>> Thrust the Ship Forward\r\n                this.ship.isThrusting = true;\r\n                break;\r\n            case 'arrowright':\r\n                // --- Right Arrow -->>> Rotate Ship Right\r\n                this.rotateShip(true);\r\n                break;\r\n            default:\r\n                console.log(code);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onKeyUp(code: string): void {\r\n\r\n        if (this.ship.isDead)\r\n            return;\r\n\r\n        switch (code) {\r\n            case 'space':\r\n                // --- space bar -->>> Allow Shooting again\r\n                this.ship.canShoot = true;\r\n                break;\r\n            case 'arrowleft':\r\n                // --- Left Arrow -->>> stop rotating left\r\n                this.ship.rot = 0;\r\n                break;\r\n            case 'arrowup':\r\n                // --- Up Arrow -->>> Stop thrusting\r\n                this.ship.isThrusting = false;\r\n                break;\r\n            case 'arrowright':\r\n                // --- Right Arrow -->>> Stop rotating right\r\n                this.ship.rot = 0;\r\n                break;\r\n            default:\r\n                console.log(code);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private shootLaser(): void {\r\n    }\r\n\r\n    private rotateShip(isClockwise: boolean): void {\r\n    }\r\n\r\n    private update(): void {\r\n\r\n        let isBlinkOn: boolean = this.ship.blinkNum % 2 === 0,\r\n            isExploding: boolean = this.ship.explodeTime > 0;\r\n\r\n        this.music.tick();\r\n\r\n        this.drawSpace();\r\n\r\n        // --- drawing asteroid\r\n        let x: number,\r\n            y: number,\r\n            a: number,\r\n            r: number,\r\n            offs: Array<number>,\r\n            vert: number;\r\n\r\n        for(let i = 0; i < this.asteroids.length; i++) {\r\n\r\n            this.ctx.strokeStyle = GAME_CONFIG.COLOR_SLATE_GRAY;\r\n            this.ctx.lineWidth = GAME_CONFIG.SHIP_SIZE / 20;\r\n\r\n            // --- asteroids properties\r\n            let tempAsteroid: iAsteroid = this.asteroids[i];\r\n            a = tempAsteroid.a;\r\n            x = tempAsteroid.x;\r\n            y = tempAsteroid.y;\r\n            r = tempAsteroid.r;\r\n            offs = tempAsteroid.offset;\r\n            vert = tempAsteroid.vert;\r\n\r\n            // --- drawing path\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(\r\n                x + r * offs[0] + Math.cos(a),\r\n                y + r * offs[0] + Math.sin(a)\r\n            );\r\n\r\n            // --- drawing polygon\r\n            for(let j = 1; j < vert; j++) {\r\n                this.ctx.lineTo(\r\n                    x + r * offs[j] + Math.cos(a + j * Math.PI * 2 / vert),\r\n                    y + r * offs[j] + Math.sin(a + j * Math.PI * 2 / vert)\r\n                );\r\n            }\r\n\r\n            this.ctx.closePath();\r\n            this.ctx.stroke();\r\n\r\n            if(GAME_CONFIG.SHOW_BOUNDING) {\r\n                this.ctx.strokeStyle = GAME_CONFIG.COLOR_LIME;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(x, y, r, 0, Math.PI * 2, false);\r\n                this.ctx.closePath();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private drawSpace(): void {\r\n\r\n        this.ctx.fillStyle = GAME_CONFIG.COLOR_BLACK;\r\n        this.ctx.fillRect(0, 0, this.getCanvasWidth(), this.getCanvasHeight());\r\n    }\r\n}\r\n\r\n","import Game from './Game';\r\n\r\nclass App {\r\n    private _game: Game;\r\n\r\n    constructor(game: Game) {\r\n        this._game = game;\r\n    }\r\n\r\n    public setUp(): void {\r\n\r\n        // -- Any setup that game require before boot-up the game\r\n        this._game.setUpGame();\r\n        // this.gameLoop();\r\n    }\r\n\r\n    private gameLoop(): void {\r\n        window.requestAnimationFrame(this.gameLoop.bind(this));\r\n\r\n        this._game.render();\r\n    }\r\n}\r\n\r\nwindow.onload = () => {\r\n    let app = new App(new Game());\r\n    app.setUp();\r\n}"]}